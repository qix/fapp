generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "interactiveTransactions"]

}

datasource db {
  provider             = "mysql"
  url                  = env("PLANETSCALE_PRISMA_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model ActionLog {
  id      Int    @id @default(autoincrement())
  type    String
  payload String @db.Text
}

enum EventInviteResponse {
  NONE
  GOING
  NOT_GOING
  MAYBE
}

model Event {
  id                  String  @id @default(cuid())
  isOpen              Boolean @default(true)
  slug                String  @unique
  name                String
  description         String? @db.Text
  calendarTitle       String?
  calendarDescription String? @db.Text
  address             String?
  googlePlaceId       String?
  startAtIso          String?
  endAtIso            String?
  metaDescription     String? @db.Text
  datedName           String?
  opengraphImage      String?
  headerImage         String?
}

model EventInvite {
  id                String              @id @default(cuid())
  eventId           String
  slug              String?
  inviteMessage     String?             @db.Text
  invitedName       String?
  invitedEmail      String?
  privateNote       String?             @db.Text
  response          EventInviteResponse @default(NONE)
  message           String?             @db.Text
  guestCount        Int                 @default(1)
  guestName         String?
  guestMax          Int?
  confidencePercent Int?

  @@unique([eventId, slug])
}

model Invitation {
  id           String  @id @default(cuid())
  isOpen       Boolean @default(true)
  inviteCode   String  @unique
  invitedName  String
  invitedEmail String?
  senderUserId String
  vouchMessage String  @db.Text
}

model Vouch {
  id           String @id @default(cuid())
  sourceUserId String
  targetUserId String
  message      String @db.Text
}

model User {
  // next-auth fields:
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // custom fields:
  memberActive        Boolean @default(false)
  memberName          String?
  memberEmail         String?
  memberEmailVerified Boolean @default(false)
  memberInvitationId  String?
  memberPronoun1      String?
  memberPronoun2      String?
  memberWhatDo        String? @db.Text

  memberDiscordID String?
}

// next-auth models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
